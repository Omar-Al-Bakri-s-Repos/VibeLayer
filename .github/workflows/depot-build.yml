name: Depot Build Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.bmad/**'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      target:
        description: 'Build target'
        required: false
        type: choice
        options:
          - monorepo
          - control-panel
          - all
        default: 'monorepo'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build with Depot
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Depot CLI
        uses: depot/setup-action@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push monorepo image
        uses: depot/build-push-action@v1
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          project: ${{ secrets.DEPOT_PROJECT_ID }}
          token: ${{ secrets.DEPOT_TOKEN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: Build and push control-panel image
        if: github.event.inputs.target == 'control-panel' || github.event.inputs.target == 'all'
        uses: depot/build-push-action@v1
        with:
          context: ./apps/control-panel
          file: ./apps/control-panel/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/control-panel:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          project: ${{ secrets.DEPOT_PROJECT_ID }}
          token: ${{ secrets.DEPOT_TOKEN }}

  test-build:
    name: Test Build Output
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Depot CLI
        uses: depot/setup-action@v1

      - name: Test build locally
        run: |
          depot build \
            --project ${{ secrets.DEPOT_PROJECT_ID }} \
            --token ${{ secrets.DEPOT_TOKEN }} \
            --load \
            -t vibelayer:test \
            .

      - name: Test container startup
        run: |
          docker run -d \
            --name vibelayer-test \
            -p 3000:3000 \
            vibelayer:test
          
          # Wait for container to be healthy
          sleep 10
          
          # Check if container is running
          docker ps | grep vibelayer-test
          
          # Check logs
          docker logs vibelayer-test
          
          # Basic health check
          curl -f http://localhost:3000 || exit 1
          
          # Cleanup
          docker stop vibelayer-test
          docker rm vibelayer-test

  deploy:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Deploy notification
        run: |
          echo "ðŸš€ Deployment ready for ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Images built and pushed successfully to registry"