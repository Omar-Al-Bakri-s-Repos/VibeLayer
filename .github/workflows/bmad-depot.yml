name: VibeLayer BMAD-Depot Development Pipeline

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - coordinate-development
          - spawn-single-agent
          - monitor-sessions
          - cleanup-sessions
        default: 'coordinate-development'
      story_file:
        description: 'Story file path (for spawn-single-agent)'
        required: false
        default: ''
      story_id:
        description: 'Story identifier (optional)'
        required: false
        default: ''
      max_concurrent:
        description: 'Maximum concurrent development agents'
        required: false
        default: '5'
      stories_dir:
        description: 'Stories directory path (optional)'
        required: false
        default: ''

  push:
    paths:
      - '.bmad/stories/**/*.md'
      - 'stories/**/*.md'
    branches:
      - main
      - develop

  pull_request:
    paths:
      - '.bmad/stories/**/*.md' 
      - 'stories/**/*.md'

concurrency:
  group: bmad-depot-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: false

jobs:
  validate-environment:
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.validate.outputs.proceed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Depot CLI
        run: |
          curl -L https://depot.dev/install-cli.sh | sh
          echo "$HOME/.depot/bin" >> $GITHUB_PATH

      - name: Validate environment
        id: validate
        run: |
          echo "üîç Validating BMAD-Depot environment..."
          
          # Check for required directories
          if [ ! -d "scripts/depot" ]; then
            echo "‚ùå scripts/depot directory not found"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check for required scripts
          if [ ! -f "scripts/depot/bmad_depot_bridge.py" ]; then
            echo "‚ùå BMAD-Depot bridge script not found"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Make scripts executable
          chmod +x scripts/depot/*.py
          
          echo "‚úÖ Environment validation passed"
          echo "proceed=true" >> $GITHUB_OUTPUT

  execute-bmad-depot-action:
    needs: validate-environment
    if: needs.validate-environment.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Depot CLI
        run: |
          curl -L https://depot.dev/install-cli.sh | sh
          echo "$HOME/.depot/bin" >> $GITHUB_PATH

      - name: Configure Depot Authentication
        env:
          DEPOT_TOKEN: ${{ secrets.DEPOT_TOKEN }}
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          if [ -z "$DEPOT_TOKEN" ]; then
            echo "‚ùå DEPOT_TOKEN secret not configured"
            exit 1
          fi
          
          depot login --token "$DEPOT_TOKEN"
          
          if [ -n "$CLAUDE_CODE_OAUTH_TOKEN" ]; then
            echo "‚úÖ Claude Code OAuth token configured"
          else
            echo "‚ö†Ô∏è  Claude Code OAuth token not configured - some features may not work"
          fi

      - name: Execute BMAD-Depot Action
        id: bmad_action
        env:
          ACTION: ${{ inputs.action || 'coordinate-development' }}
          STORY_FILE: ${{ inputs.story_file }}
          STORY_ID: ${{ inputs.story_id }}
          MAX_CONCURRENT: ${{ inputs.max_concurrent || '5' }}
          STORIES_DIR: ${{ inputs.stories_dir }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          echo "üöÄ Executing BMAD-Depot action: $ACTION"
          
          # Make scripts executable
          chmod +x scripts/depot/*.py
          
          # Determine command based on action
          case "$ACTION" in
            "coordinate-development")
              echo "üì¶ Coordinating parallel development..."
              if [ -n "$STORIES_DIR" ]; then
                python3 scripts/depot/bmad_depot_bridge.py coordinate --stories-dir "$STORIES_DIR" --max-concurrent "$MAX_CONCURRENT" > action_result.json
              else
                python3 scripts/depot/bmad_depot_bridge.py coordinate --max-concurrent "$MAX_CONCURRENT" > action_result.json
              fi
              ;;
            "spawn-single-agent")
              if [ -z "$STORY_FILE" ]; then
                echo "‚ùå Story file required for spawn-single-agent action"
                exit 1
              fi
              echo "ü§ñ Spawning development agent for story: $STORY_FILE"
              if [ -n "$STORY_ID" ]; then
                python3 scripts/depot/bmad_depot_bridge.py spawn-dev --story-file "$STORY_FILE" --story-id "$STORY_ID" > action_result.json
              else
                python3 scripts/depot/bmad_depot_bridge.py spawn-dev --story-file "$STORY_FILE" > action_result.json
              fi
              ;;
            "monitor-sessions")
              echo "üìä Monitoring active development sessions..."
              python3 scripts/depot/bmad_depot_bridge.py monitor --timeout 15 > action_result.json
              ;;
            "cleanup-sessions")
              echo "üßπ Cleaning up old sessions..."
              python3 scripts/depot/bmad_depot_bridge.py cleanup > action_result.json
              ;;
            *)
              echo "‚ùå Unknown action: $ACTION"
              exit 1
              ;;
          esac
          
          # Check if action succeeded
          if [ $? -eq 0 ]; then
            echo "‚úÖ Action completed successfully"
            echo "result_status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Action failed"
            echo "result_status=failure" >> $GITHUB_OUTPUT
          fi
          
          # Extract key information from result
          if [ -f "action_result.json" ]; then
            cat action_result.json | jq '.'
            
            # Extract summary information
            if command -v jq >/dev/null 2>&1; then
              SUCCESS=$(jq -r '.success // false' action_result.json)
              MESSAGE=$(jq -r '.message // "No message"' action_result.json)
              
              echo "action_success=$SUCCESS" >> $GITHUB_OUTPUT
              echo "action_message=$MESSAGE" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bmad-depot-results-${{ github.run_number }}
          path: |
            action_result.json
            .depot/sessions/*.json
            .depot/logs/*.log
          retention-days: 30

      - name: Create Job Summary
        if: always()
        run: |
          echo "# üåâ BMAD-Depot Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** ${{ inputs.action || 'coordinate-development' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.bmad_action.outputs.result_status || 'unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "action_result.json" ]; then
            echo "**Results:**" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat action_result.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && steps.bmad_action.outputs.action_success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let resultContent = "## üåâ BMAD-Depot Development Results\n\n";
            
            if (fs.existsSync('action_result.json')) {
              const result = JSON.parse(fs.readFileSync('action_result.json', 'utf8'));
              
              resultContent += `**Action:** ${{ inputs.action || 'coordinate-development' }}\n`;
              resultContent += `**Status:** ${result.success ? '‚úÖ Success' : '‚ùå Failed'}\n`;
              resultContent += `**Message:** ${result.message || 'No message'}\n\n`;
              
              if (result.coordination_result) {
                resultContent += `**Sessions Spawned:** ${result.coordination_result.sessions_spawned || 0}\n`;
                resultContent += `**Total Stories:** ${result.coordination_result.total_stories || 0}\n`;
              }
              
              resultContent += `\n<details><summary>Full Results</summary>\n\n\`\`\`json\n${JSON.stringify(result, null, 2)}\n\`\`\`\n</details>`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: resultContent
            });

  notify-completion:
    needs: [validate-environment, execute-bmad-depot-action]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Workflow Summary
        run: |
          echo "üîî BMAD-Depot Pipeline Completed"
          echo "Action: ${{ inputs.action || 'coordinate-development' }}"
          echo "Status: ${{ needs.execute-bmad-depot-action.result }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"